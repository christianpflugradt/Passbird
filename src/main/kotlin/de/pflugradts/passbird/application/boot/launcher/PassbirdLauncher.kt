package de.pflugradts.passbird.application.boot.launcher

import com.google.inject.Inject
import de.pflugradts.passbird.application.UserInterfaceAdapterPort
import de.pflugradts.passbird.application.boot.Bootable
import de.pflugradts.passbird.application.boot.bootModule
import de.pflugradts.passbird.application.boot.main.ApplicationModule
import de.pflugradts.passbird.application.boot.setup.SetupModule
import de.pflugradts.passbird.application.configuration.ReadableConfiguration
import de.pflugradts.passbird.application.toDirectory
import de.pflugradts.passbird.application.toFileName
import de.pflugradts.passbird.application.util.SystemOperation
import de.pflugradts.passbird.domain.model.shell.Shell.Companion.shellOf
import de.pflugradts.passbird.domain.model.transfer.Output.Companion.outputOf

private const val COPYRIGHT = "\tCopyright 2020 - 2024 Christian Pflugradt"
private const val LICENSE = """${'\t'}This software is licensed under the Apache License, Version 2.0 (APLv2)
${'\t'}You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
"""
private const val SLOGAN = "\tguarding your digital nest with secure feathers"

class PassbirdLauncher @Inject constructor(
    @Inject private val configuration: ReadableConfiguration,
    @Inject private val userInterfaceAdapterPort: UserInterfaceAdapterPort,
    @Inject private val systemOperation: SystemOperation,
) : Bootable {

    private val keyStoreLocation get() = configuration.adapter.keyStore.location

    override fun boot() {
        sendLicenseNotice()
        sendBanner()
        bootModule(if (keystoreExists()) ApplicationModule() else SetupModule())
    }

    private fun keystoreExists() = keyStoreLocation.isNotEmpty() &&
        systemOperation.resolvePath(keyStoreLocation.toDirectory(), ReadableConfiguration.KEYSTORE_FILENAME.toFileName()).toFile().exists()

    private fun sendBanner() {
        userInterfaceAdapterPort.sendLineBreak()
        userInterfaceAdapterPort.send(outputOf(shellOf(banner())))
        userInterfaceAdapterPort.send(outputOf(shellOf("\t${javaClass.getPackage().implementationVersion}")))
        userInterfaceAdapterPort.sendLineBreak()
        userInterfaceAdapterPort.send(outputOf(shellOf(SLOGAN)))
        userInterfaceAdapterPort.sendLineBreak()
    }

    private fun sendLicenseNotice() {
        userInterfaceAdapterPort.sendLineBreak()
        userInterfaceAdapterPort.send(outputOf(shellOf(COPYRIGHT)))
        userInterfaceAdapterPort.send(outputOf(shellOf(LICENSE)))
    }

    private fun banner() = byteArrayOf(
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2C, 0x5F, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5F, 0x20, 0x20, 0x20, 0x20, 0x3E, 0x27, 0x20, 0x29, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x5F, 0x20, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x5F, 0x5F, 0x5F, 0x20, 0x5C, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x20, 0x20, 0x28, 0x20, 0x28, 0x20, 0x5C, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x7C, 0x20, 0x7C, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x7C, 0x5F, 0x2F, 0x20, 0x2F, 0x5F, 0x20, 0x5F, 0x20, 0x5F,
        0x5F, 0x5F, 0x20, 0x5F, 0x5F, 0x5F, 0x7C, 0x20, 0x7C, 0x5F, 0x5F, 0x20, 0x20, 0x5F, 0x20, 0x5F, 0x20, 0x5F, 0x5F, 0x20, 0x5F, 0x5F,
        0x7C, 0x20, 0x7C, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x20, 0x5F, 0x5F, 0x2F, 0x20, 0x5F, 0x60, 0x20, 0x2F, 0x20, 0x5F, 0x5F,
        0x2F, 0x20, 0x5F, 0x5F, 0x7C, 0x20, 0x27, 0x5F, 0x20, 0x5C, 0x7C, 0x20, 0x7C, 0x20, 0x27, 0x5F, 0x5F, 0x2F, 0x20, 0x5F, 0x60, 0x20,
        0x7C, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x28, 0x5F, 0x7C, 0x20, 0x5C, 0x5F, 0x5F, 0x20, 0x5C, 0x5F,
        0x5F, 0x20, 0x5C, 0x20, 0x7C, 0x5F, 0x29, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x28, 0x5F, 0x7C, 0x20, 0x7C, 0x0A,
        0x20, 0x20, 0x20, 0x20, 0x5C, 0x5F, 0x7C, 0x20, 0x20, 0x5C, 0x5F, 0x5F, 0x2C, 0x5F, 0x7C, 0x5F, 0x5F, 0x5F, 0x2F, 0x5F, 0x5F, 0x5F,
        0x2F, 0x5F, 0x2E, 0x5F, 0x5F, 0x2F, 0x7C, 0x5F, 0x7C, 0x5F, 0x7C, 0x20, 0x20, 0x5C, 0x5F, 0x5F, 0x2C, 0x5F, 0x7C, 0x0A,
    )
}
