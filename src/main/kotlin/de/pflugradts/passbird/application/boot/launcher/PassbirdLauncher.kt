package de.pflugradts.passbird.application.boot.launcher

import com.google.inject.Inject
import de.pflugradts.passbird.application.UserInterfaceAdapterPort
import de.pflugradts.passbird.application.boot.Bootable
import de.pflugradts.passbird.application.boot.bootModule
import de.pflugradts.passbird.application.boot.main.ApplicationModule
import de.pflugradts.passbird.application.boot.setup.SetupModule
import de.pflugradts.passbird.application.configuration.ReadableConfiguration
import de.pflugradts.passbird.application.toDirectory
import de.pflugradts.passbird.application.toFileName
import de.pflugradts.passbird.application.util.SystemOperation
import de.pflugradts.passbird.domain.model.shell.Shell.Companion.shellOf
import de.pflugradts.passbird.domain.model.transfer.Output.Companion.outputOf
import de.pflugradts.passbird.domain.model.transfer.OutputFormatting.BLUE
import de.pflugradts.passbird.domain.model.transfer.OutputFormatting.YELLOW

private const val COPYRIGHT = "\tCopyright 2020 - 2024 Christian Pflugradt"
private const val LICENSE = """${'\t'}This software is licensed under the Apache License, Version 2.0 (APLv2)
${'\t'}You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
"""
private const val SLOGAN = "\tguarding your digital nest with secure feathers"

class PassbirdLauncher @Inject constructor(
    @Inject private val configuration: ReadableConfiguration,
    @Inject private val userInterfaceAdapterPort: UserInterfaceAdapterPort,
    @Inject private val systemOperation: SystemOperation,
) : Bootable {

    private val keyStoreLocation get() = configuration.adapter.keyStore.location
    private val ansiEscapeCodesEnabled get() = configuration.adapter.userInterface.ansiEscapeCodes.enabled

    override fun boot() {
        sendLicenseNotice()
        sendBanner()
        bootModule(if (keystoreExists()) ApplicationModule() else SetupModule())
    }

    private fun keystoreExists() = keyStoreLocation.isNotEmpty() &&
        systemOperation.resolvePath(keyStoreLocation.toDirectory(), ReadableConfiguration.KEYSTORE_FILENAME.toFileName()).toFile().exists()

    private fun sendBanner() {
        userInterfaceAdapterPort.sendLineBreak()
        userInterfaceAdapterPort.send(outputOf(shellOf(if (ansiEscapeCodesEnabled) coloredBanner() else plainBanner())))
        userInterfaceAdapterPort.send(outputOf(shellOf("\t${javaClass.getPackage().implementationVersion}"), BLUE))
        userInterfaceAdapterPort.sendLineBreak()
        userInterfaceAdapterPort.send(outputOf(shellOf(SLOGAN), YELLOW))
        userInterfaceAdapterPort.sendLineBreak()
    }

    private fun sendLicenseNotice() {
        userInterfaceAdapterPort.sendLineBreak()
        userInterfaceAdapterPort.send(outputOf(shellOf(COPYRIGHT)))
        userInterfaceAdapterPort.send(outputOf(shellOf(LICENSE)))
    }

    private fun plainBanner() = byteArrayOf(
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2C, 0x5F, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5F, 0x20, 0x20, 0x20, 0x20, 0x3E, 0x27, 0x20, 0x29, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x5F, 0x20, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x5F, 0x5F, 0x5F, 0x20, 0x5C, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x20, 0x20, 0x28, 0x20, 0x28, 0x20, 0x5C, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x7C, 0x20, 0x7C, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x7C, 0x5F, 0x2F, 0x20, 0x2F, 0x5F, 0x20, 0x5F, 0x20, 0x5F,
        0x5F, 0x5F, 0x20, 0x5F, 0x5F, 0x5F, 0x7C, 0x20, 0x7C, 0x5F, 0x5F, 0x20, 0x20, 0x5F, 0x20, 0x5F, 0x20, 0x5F, 0x5F, 0x20, 0x5F, 0x5F,
        0x7C, 0x20, 0x7C, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x20, 0x5F, 0x5F, 0x2F, 0x20, 0x5F, 0x60, 0x20, 0x2F, 0x20, 0x5F, 0x5F,
        0x2F, 0x20, 0x5F, 0x5F, 0x7C, 0x20, 0x27, 0x5F, 0x20, 0x5C, 0x7C, 0x20, 0x7C, 0x20, 0x27, 0x5F, 0x5F, 0x2F, 0x20, 0x5F, 0x60, 0x20,
        0x7C, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x28, 0x5F, 0x7C, 0x20, 0x5C, 0x5F, 0x5F, 0x20, 0x5C, 0x5F,
        0x5F, 0x20, 0x5C, 0x20, 0x7C, 0x5F, 0x29, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x28, 0x5F, 0x7C, 0x20, 0x7C, 0x0A,
        0x20, 0x20, 0x20, 0x20, 0x5C, 0x5F, 0x7C, 0x20, 0x20, 0x5C, 0x5F, 0x5F, 0x2C, 0x5F, 0x7C, 0x5F, 0x5F, 0x5F, 0x2F, 0x5F, 0x5F, 0x5F,
        0x2F, 0x5F, 0x2E, 0x5F, 0x5F, 0x2F, 0x7C, 0x5F, 0x7C, 0x5F, 0x7C, 0x20, 0x20, 0x5C, 0x5F, 0x5F, 0x2C, 0x5F, 0x7C, 0x0A,
    )

    private fun coloredBanner() = byteArrayOf(
        0x0a, 0x1b, 0x5b, 0x33, 0x38, 0x3b, 0x35, 0x3b, 0x33, 0x39, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2c, 0x5f, 0x0a, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f,
        0x5f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x20, 0x20, 0x20, 0x20, 0x1b, 0x5b, 0x33,
        0x38, 0x3b, 0x35, 0x3b, 0x32, 0x32, 0x30, 0x6d, 0x3e, 0x27, 0x20, 0x29, 0x1b, 0x5b, 0x33, 0x38, 0x3b, 0x35, 0x3b, 0x33, 0x39, 0x6d,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x20, 0x0a, 0x7c, 0x20, 0x5f, 0x5f, 0x5f, 0x20, 0x5c, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c, 0x20, 0x7c, 0x20, 0x20, 0x20, 0x1b, 0x5b, 0x33, 0x38, 0x3b, 0x35, 0x3b, 0x31, 0x39, 0x36,
        0x6d, 0x28, 0x20, 0x28, 0x20, 0x5c, 0x1b, 0x5b, 0x33, 0x38, 0x3b, 0x35, 0x3b, 0x33, 0x39, 0x6d, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7c,
        0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x7c, 0x5f, 0x2f, 0x20, 0x2f, 0x5f, 0x20, 0x5f, 0x20, 0x5f, 0x5f, 0x5f, 0x20, 0x5f, 0x5f, 0x5f, 0x7c,
        0x20, 0x7c, 0x5f, 0x5f, 0x20, 0x20, 0x5f, 0x20, 0x5f, 0x20, 0x5f, 0x5f, 0x20, 0x5f, 0x5f, 0x7c, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x20,
        0x5f, 0x5f, 0x2f, 0x20, 0x5f, 0x60, 0x20, 0x2f, 0x20, 0x5f, 0x5f, 0x2f, 0x20, 0x5f, 0x5f, 0x7c, 0x20, 0x27, 0x5f, 0x20, 0x5c, 0x7c,
        0x20, 0x7c, 0x20, 0x27, 0x5f, 0x5f, 0x2f, 0x20, 0x5f, 0x60, 0x20, 0x7c, 0x0a, 0x7c, 0x20, 0x7c, 0x20, 0x7c, 0x20, 0x28, 0x5f, 0x7c,
        0x20, 0x5c, 0x5f, 0x5f, 0x20, 0x5c, 0x5f, 0x5f, 0x20, 0x5c, 0x20, 0x7c, 0x5f, 0x29, 0x20, 0x7c, 0x20, 0x7c, 0x20, 0x7c, 0x20, 0x7c,
        0x20, 0x28, 0x5f, 0x7c, 0x20, 0x7c, 0x0a, 0x5c, 0x5f, 0x7c, 0x20, 0x20, 0x5c, 0x5f, 0x5f, 0x2c, 0x5f, 0x7c, 0x5f, 0x5f, 0x5f, 0x2f,
        0x5f, 0x5f, 0x5f, 0x2f, 0x5f, 0x2e, 0x5f, 0x5f, 0x2f, 0x7c, 0x5f, 0x7c, 0x5f, 0x7c, 0x20, 0x20, 0x5c, 0x5f, 0x5f, 0x2c, 0x5f, 0x7c,
        0x1b, 0x5b, 0x30, 0x6d, 0x0a,
    )
}
